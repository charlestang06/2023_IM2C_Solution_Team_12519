# -*- coding: utf-8 -*-
"""sunshinepredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lv-xI9FzcAkKOid_dfCRgrZ9Dj5SDGCa
"""

import csv
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

dataset = tf.data.Dataset.from_tensor_slices([45,85.8,119,138.9,105.2,177.1,137.1,122.9,78.8,83.6,60.6,55.2,74.1,60,129,97.5,184.7,180,195.3,115.8,98.2,46.4,30.1,36.7,54.3,69,133.8,79.5,82.7,158.2,186.9,144.9,85.4,49.3,55.1,51,53.3,77.8,111.5,120.9,161.7,186,201.2,190.4,85.8,44.7,69.8,22.1,86.5,99.3,110.4,127.7,167.2,178.3,201.1,161,94.8,100.3,70.8,54.3,16.2,64.1,18.3])

#Initialize windows
dataset = dataset.window(10, shift = 1, drop_remainder = True)

#Create batched windows
dataset = dataset.flat_map(lambda window: window.batch(10))

#Create windows
dataset = dataset.map(lambda window: (window[:-1], window[-1:]))

#Shuffle Dataset
dataset = dataset.shuffle(buffer_size = 10)

#Batch dataset
dataset = dataset.batch(2).prefetch(1)

for X, y in dataset:
    print("Input:", X.numpy(), "Target:", y.numpy())

tf.keras.backend.clear_session()

model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(None, 1)),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(9, return_sequences = True)),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(9)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(1),
    tf.keras.layers.Lambda(lambda x: x * 200)
])

model.summary()

model.compile(optimizer='adam', loss=tf.keras.losses.Huber(), metrics=['mae'])

model.fit(dataset, epochs=50)

initial = [201.1,161,94.8,100.3,70.8,54.3,16.2,64.1,18.3]

# n is months after March, 2023
def predict_sunshine(n):
  for i in range(n):
    result = model.predict([initial[i:]], verbose=0)
    initial.append(float(result[0][0]))
  return(initial[-1])

from matplotlib.backends.backend_pdf import PdfPages

def function_plot(X, pp):
    plt.figure()
    plt.clf()
    plt.plot(X)
    graph = plt.title('y vs x')
    plt.xlabel("Time (Months)")
    plt.ylabel("Hours of Sunshine")
    pp.savefig(plt.gcf())


with PdfPages('test.pdf') as pp:
    function_plot(initial, pp)